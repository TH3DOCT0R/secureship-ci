name: SecureShip-CI
on:
  pull_request:
  push:
    branches: [ main, master ]

permissions:
  contents: read
  security-events: write   # needed for upload-sarif
  actions: read

concurrency:
  group: secureship-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  ZAP_TARGET: ${{ vars.ZAP_TARGET }}  # set at repo/org level e.g., https://staging.example.com

jobs:
  semgrep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Option A (recommended): official action pulling registry rules
      - name: Semgrep scan
        uses: semgrep/semgrep-action@v1
        with:
          generateSarif: true
          # Multiple rulepacks space-separated:
          config: >-
            p/owasp-top-ten
            p/security-audit
            p/secrets

      - name: Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep

  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Gitleaks (SARIF)
        run: |
          curl -sSL https://raw.githubusercontent.com/gitleaks/gitleaks/master/install.sh | bash
          ./gitleaks detect \
            --redact \
            --config=security/gitleaks.toml \
            --report-format sarif \
            --report-path gitleaks.sarif \
            --exit-code 1 || true
          # we don't fail the job here; SARIF gate happens in a later, unified check if you want
      - name: Upload Gitleaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
          category: gitleaks

  trivy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db
      - name: Trivy FS scan (SARIF)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          format: sarif
          output: trivy.sarif
          ignore-unfixed: true
          severity: CRITICAL,HIGH
          vuln-type: "os,library"
      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif
          category: trivy

  zap_baseline:
    if: ${{ env.ZAP_TARGET != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: ZAP Baseline scan (HTML)
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: ${{ env.ZAP_TARGET }}
          rules_file_name: security/zap-allowlist.txt
          allow_issue_writing: false
          fail_action: true  # fail on medium/high alerts
          cmd_options: "-a -I -m 5"
      - name: Upload ZAP HTML
        uses: actions/upload-artifact@v4
        with:
          name: zap-baseline-report
          path: report.html

  # Optional: single gate job if you want to fail PR when any scan found issues
  gate:
    needs: [semgrep, gitleaks, trivy] # add zap_baseline if required
    runs-on: ubuntu-latest
    steps:
      - name: Gate summary
        run: |
          echo "Scans completed. Review SARIF in the 'Security' tab and artifacts."
          # Keep simple; the per-tool fail logic is already applied (Trivy fails on HIGH/CRITICAL; ZAP 'fail_action: true').
